import UIKit

var participants = Set<String>()

participants.insert("Guillaume")
participants.insert("Daniel")
participants.insert("Alberto")
participants.insert("Alpha")
participants.insert("Patrice")

participants.insert("Alpha")
participants.insert("Patrice")

var ages = Set<Int>() // use Int instead of UInt

ages.insert(1)
ages.insert(2)
ages.insert(1)

// Convert the sets to strings before concatenating them
let participantsString = "nom \(participants)"
let agesString = String(describing: ages)
let result = participantsString + agesString
print(result)

// Generic
class Pile<Chose> {
    
    var choses = [Chose]()

    func addChose(_ chose: Chose) {
        choses.append(chose)
    }
}

var maPile = Pile<String>()
maPile.addChose("Paul")
maPile.addChose("Jean")
maPile.addChose("Simon")
maPile.addChose("Luca")
maPile.addChose("Marie")
maPile.addChose("Sylvain")
maPile.addChose("Simon")
maPile.addChose("Luca")
maPile.addChose("Marie")

for nom in maPile.choses {
    print(nom)
}

// The function signature and implementation are incorrect and unused, so commented out
/*
func participants() -> [String] {

    let participants: Set = ["Nicolas", "Guillaume", "Daniel", "Alberto", "Alpha", "Patrice"]
    let sortedParticipants = participants.sorted()
    print(sorted)

}
*/

